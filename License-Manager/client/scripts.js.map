{"version":3,"sources":["node_modules/random-org/src/RandomOrg.js"],"names":[],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB,0BAA0B;AAC1B;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;;AAEA","file":"scripts.js","sourcesContent":["var url = require('url');\nvar makeRpcRequest = require('./rpc').makeRpcRequest;\n\nfunction RandomOrg(opts) {\n  this.apiKey = opts.apiKey;\n  if (typeof this.apiKey !== 'string') {\n    throw new Error('options.apiKey is required & must be a String');\n  }\n\n  this.endpoint = opts.endpoint || 'https://api.random.org/json-rpc/2/invoke';\n  this.endpoint = url.parse(this.endpoint);\n\n  // For testing.\n  this._makeRpcRequest = makeRpcRequest;\n}\n\n[\n  // Basic api methods\n  'generateIntegers',\n  'generateDecimalFractions',\n  'generateGaussians',\n  'generateStrings',\n  'generateUUIDs',\n  'generateBlobs',\n  'getUsage',\n  // Signed api methods\n  'generateSignedIntegers',\n  'generateSignedDecimalFractions',\n  'generateSignedGaussians',\n  'generateSignedStrings',\n  'generateSignedUUIDs',\n  'generateSignedBlobs',\n  'verifySignature'\n].forEach(function(methodName) {\n  RandomOrg.prototype[methodName] = createInvocation(methodName);\n});\n\nRandomOrg.prototype._enrichParams = function(method, params) {\n  if (method === 'verifySignature') {\n    /* The verifySignature method requires no api key (so that anyone\n     * can verify the authenticity of some response). */\n    return params;\n  }\n\n  var requestParams = { apiKey: this.apiKey };\n  Object.keys(params || {}).forEach(function(property) {\n    requestParams[property] = params[property];\n  });\n  return requestParams;\n}\n\nfunction createInvocation(methodName) {\n  return function(params) {\n    var requestOpts = {\n      endpoint: this.endpoint,\n      method: methodName,\n      params: this._enrichParams(methodName, params)\n    };\n    return this._makeRpcRequest(requestOpts)\n      .then(function (response) {\n        if (response.error) {\n          var error = new Error(response.error.message);\n          error.code = response.error.code;\n          throw error;\n        } else {\n          return response.result;\n        }\n      });\n  };\n}\n\nmodule.exports = RandomOrg;\n"],"sourceRoot":"webpack:///"}